"""

███╗   ███╗ █████╗ ██╗
████╗ ████║██╔══██╗██║
██╔████╔██║███████║██║
██║╚██╔╝██║██╔══██║██║
██║ ╚═╝ ██║██║  ██║██║
╚═╝     ╚═╝╚═╝  ╚═╝╚═╝

Made With ❤️ By Ghoul & Nerd

"""
import re
from typing import List, Tuple

import aiohttp
import pyshorteners
from pyshorteners import Shortener
from pyshorteners.exceptions import (
    BadAPIResponseException,
    BadURLException,
    ShorteningErrorException,
)

from config.ext.parser import config

from .logging import log


async def shorten_url(url: str) -> str:
    """Shorterns A URL Using Bit.ly API

    Parameters
    ----------
    url : str
        The URL to shorten

    Returns
    -------
    [str]
        URL Generated By Bit.ly
    """
    shortened_url: str = ""

    s: Shortener = pyshorteners.Shortener(api_key=config["BITLY_API_TOKEN"])
    try:
        shortened_url: str = s.bitly.short(url)
    except (BadAPIResponseException, BadURLException, ShorteningErrorException):
        log.error("[red]ERROR WHEN TRYING TO SHORTEN URL.[/red]")

    return shortened_url


async def get_scam_links() -> str:
    async with aiohttp.ClientSession() as session:
        async with session.get(
            "https://raw.githubusercontent.com/DevSpen/scam-links/master/src/links.txt"
        ) as response:
            text: str = await response.text()
            return text


async def get_malicious_links() -> str:
    async with aiohttp.ClientSession() as session:
        async with session.get(
            "https://raw.githubusercontent.com/DevSpen/scam-links/master/src/malicious-terms.txt"
        ) as response:
            text: str = await response.text()
            return text


async def get_trailing_links() -> str:
    async with aiohttp.ClientSession() as session:
        async with session.get(
            "https://raw.githubusercontent.com/DevSpen/scam-links/master/src/trailing-slashes.txt"
        ) as response:
            text: str = await response.text()
            return text


async def is_scam_link(link: str) -> bool:
    async with aiohttp.ClientSession() as session:
        params: dict[str, str] = {"link": link}
        async with session.get(
            "https://spen.tk/api/v1/isScamLink", params=params
        ) as response:
            json = await response.json()

            if json["result"] == "true":
                return True
            else:
                return False


async def get_malicious_terms(text: str) -> Tuple[bool, List]:
    async with aiohttp.ClientSession() as session:
        params: dict[str, str] = {"text": text}
        async with session.get(
            "https://spen.tk/api/v1/isMaliciousTerm", params=params
        ) as response:
            json = await response.json()

            return json["hasMatch"], json["matches"]


async def is_valid_url(url: str) -> bool:
    regex: re.Pattern[str] = re.compile(
        r"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*(),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+"
    )
    if regex.match(url) is not None:
        return True
    else:
        return False
